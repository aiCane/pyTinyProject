# 原问题：在如下图所示的数字三角形中，我们需要从三角形顶部走到底部，
# 在每一个数字处，我们可以选择向临近的右下或者临近的左下走，所经过的数字的总和称为路径和，
# 请你计算从顶部到底部所有路线中最大的路径和为多少？
# 同时要求这条路径选左下的次数和选右下的次数相差不能大于1。
#     1
#    2 3
#   7 5 6
#  4 3 2 7
# 9 6 5 1 8
# 输入格式：第一行一个整数 n ，代表数字三角形的阶数，
# 接下来 n 行中，第 j 行有 j 个整数，代表数字三角形中的第 j 层，
# 整数之间用空格分割。
# 输出格式：一个整数，代表最大的路径和。

n = int(input("rank:"))
lst = []
for i in range(n):
    lst.append([])
    lst[i].append(int(num) for num in input().split())
print(lst)
